#
# This file is auto-generated. DO NOT EDIT
# Generated by: autospec.py
# Using build pattern: distutils3
#
Name     : pypi-paginate
Version  : 0.5.6
Release  : 3
URL      : https://files.pythonhosted.org/packages/68/58/e670a947136fdcece8ac5376b3df1369d29e4f6659b0c9b358605b115e9e/paginate-0.5.6.tar.gz
Source0  : https://files.pythonhosted.org/packages/68/58/e670a947136fdcece8ac5376b3df1369d29e4f6659b0c9b358605b115e9e/paginate-0.5.6.tar.gz
Summary  : Divides large result sets into pages for easier browsing
Group    : Development/Tools
License  : MIT
Requires: pypi-paginate-python = %{version}-%{release}
Requires: pypi-paginate-python3 = %{version}-%{release}
BuildRequires : buildreq-distutils3
# Suppress stripping binaries
%define __strip /bin/true
%define debug_package %{nil}

%description
---------------------
        This module helps dividing large lists of items into pages. The user is shown one page at a time and
        can navigate to other pages. Imagine you are offering a company phonebook and let the user search
        the entries. If the search result contains 23 entries but you may want to display no more than 10
        entries at once. The first page contains entries 1-10, the second 11-20 and the third 21-23. See the
        documentation of the "Page" class for more information. 
        
        How do I use this module?
        ---------------------------
        The paginate module contains extensive in-line documentation with examples.
        
        Concerning WebHelpers
        -----------------------
        This is a standalone module. Former versions were included in the WebHelpers Python module as
        webhelpers.paginate and were tightly coupled with the WebHelpers and the Pylons web framework. This
        version aims to be useful independent of any web framework.
        
        Subclassing Page()
        ------------------
        This module supports pagination through list-like objects. To paginate though other types of objects
        you can subclass the paginate.Page() class and provide a wrapper class that defines how to access
        elements of that special collection.
        
        You can find examples in other paginate_* modules like paginate_sqlalchemy. Basically you would have
        to provide a class that implements the __init__, __getitem__ and __len__ methods.
        
        It is trivial to make pagination for other datastores like Elasticsearch/Solr extending the base class.

%package python
Summary: python components for the pypi-paginate package.
Group: Default
Requires: pypi-paginate-python3 = %{version}-%{release}

%description python
python components for the pypi-paginate package.


%package python3
Summary: python3 components for the pypi-paginate package.
Group: Default
Requires: python3-core
Provides: pypi(paginate)

%description python3
python3 components for the pypi-paginate package.


%prep
%setup -q -n paginate-0.5.6
cd %{_builddir}/paginate-0.5.6
pushd ..
cp -a paginate-0.5.6 buildavx2
popd

%build
export http_proxy=http://127.0.0.1:9/
export https_proxy=http://127.0.0.1:9/
export no_proxy=localhost,127.0.0.1,0.0.0.0
export LANG=C.UTF-8
export SOURCE_DATE_EPOCH=1692639400
export GCC_IGNORE_WERROR=1
export AR=gcc-ar
export RANLIB=gcc-ranlib
export NM=gcc-nm
export CFLAGS="$CFLAGS -O3 -fdebug-types-section -femit-struct-debug-baseonly -ffat-lto-objects -flto=auto -g1 -gno-column-info -gno-variable-location-views -gz=zstd "
export FCFLAGS="$FFLAGS -O3 -fdebug-types-section -femit-struct-debug-baseonly -ffat-lto-objects -flto=auto -g1 -gno-column-info -gno-variable-location-views -gz=zstd "
export FFLAGS="$FFLAGS -O3 -fdebug-types-section -femit-struct-debug-baseonly -ffat-lto-objects -flto=auto -g1 -gno-column-info -gno-variable-location-views -gz=zstd "
export CXXFLAGS="$CXXFLAGS -O3 -fdebug-types-section -femit-struct-debug-baseonly -ffat-lto-objects -flto=auto -g1 -gno-column-info -gno-variable-location-views -gz=zstd "
export MAKEFLAGS=%{?_smp_mflags}
python3 setup.py build

pushd ../buildavx2/
export CFLAGS="$CFLAGS -m64 -march=x86-64-v3 -Wl,-z,x86-64-v3 "
export CXXFLAGS="$CXXFLAGS -m64 -march=x86-64-v3 -Wl,-z,x86-64-v3 "
export FFLAGS="$FFLAGS -m64 -march=x86-64-v3 -Wl,-z,x86-64-v3 "
export FCFLAGS="$FCFLAGS -m64 -march=x86-64-v3 "
export LDFLAGS="$LDFLAGS -m64 -march=x86-64-v3 "
python3 setup.py build

popd
%install
export MAKEFLAGS=%{?_smp_mflags}
rm -rf %{buildroot}
python3 -tt setup.py build  install --root=%{buildroot}
echo ----[ mark ]----
cat %{buildroot}/usr/lib/python3*/site-packages/*/requires.txt || :
echo ----[ mark ]----
pushd ../buildavx2/
export CFLAGS="$CFLAGS -m64 -march=x86-64-v3 -Wl,-z,x86-64-v3 "
export CXXFLAGS="$CXXFLAGS -m64 -march=x86-64-v3 -Wl,-z,x86-64-v3 "
export FFLAGS="$FFLAGS -m64 -march=x86-64-v3 -Wl,-z,x86-64-v3 "
export FCFLAGS="$FCFLAGS -m64 -march=x86-64-v3 "
export LDFLAGS="$LDFLAGS -m64 -march=x86-64-v3 "
python3 -tt setup.py build install --root=%{buildroot}-v3
popd
/usr/bin/elf-move.py avx2 %{buildroot}-v3 %{buildroot} %{buildroot}/usr/share/clear/filemap/filemap-%{name}

%files
%defattr(-,root,root,-)

%files python
%defattr(-,root,root,-)

%files python3
%defattr(-,root,root,-)
/usr/lib/python3*/*
